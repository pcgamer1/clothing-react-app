{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { SignInSuccess, SignInFailure } from './user.actions';\nimport UserActionTypes from './user.types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../components/firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (e) {\n    yield put(SignInFailure(e));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(SignInFailure(e));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(SignInFailure(e));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (e) {\n    yield put(SignInFailure(e));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["C:/Users/Sarthak/Documents/react-course/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","SignInSuccess","SignInFailure","UserActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","e","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,0CAAhF;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC/C,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACG,aAAa,CAAC;AAAEY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAMC,CAAN,EAAS;AACP,UAAMjB,GAAG,CAACI,aAAa,CAACa,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA8B;AACjC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMZ,IAAI,CAACa,eAAL,CAAqBd,cAArB,CAAvB;AACA,UAAMI,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAMF,CAAN,EAAS;AACP,UAAMjB,GAAG,CAACI,aAAa,CAACa,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,CAA2B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA3B,EAA6D;AAChE,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMZ,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGE,OAAMF,CAAN,EAAS;AACP,UAAMjB,GAAG,CAACI,aAAa,CAACa,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAAiC;AACpC,MAAI;AACA,UAAMf,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAG,CAACE,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIE,OAAMM,CAAN,EAAS;AACP,UAAMjB,GAAG,CAACI,aAAa,CAACa,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUU,mBAAV,GAAiC;AACpC,QAAM5B,UAAU,CAACM,eAAe,CAACuB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUW,kBAAV,GAAgC;AACnC,QAAM9B,UAAU,CAACM,eAAe,CAACyB,mBAAjB,EAAsCT,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUU,kBAAV,GAAgC;AACnC,QAAMhC,UAAU,CAACM,eAAe,CAAC2B,kBAAjB,CAAhB;AACH;AAED,OAAO,UAAUC,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAACyB,mBAAD,CADE,EAENzB,IAAI,CAAC2B,kBAAD,CAFE,EAGN3B,IAAI,CAACwB,mBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\r\nimport { SignInSuccess, SignInFailure } from './user.actions'\r\nimport UserActionTypes from './user.types'\r\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../components/firebase/firebase.utils'\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth)\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(e) {\r\n        yield put(SignInFailure(e))\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle () {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider)\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch(e) {\r\n        yield put(SignInFailure(e))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail ({ payload: { email, password } }) {\r\n    try {   \r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password)\r\n        yield getSnapshotFromUserAuth(user)\r\n    } catch(e) {\r\n        yield put(SignInFailure(e))\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated () {\r\n    try {\r\n        const userAuth = yield getCurrentUser()\r\n        if(!userAuth) return \r\n        yield getSnapshotFromUserAuth(userAuth)\r\n    } catch(e) {\r\n        yield put(SignInFailure(e))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart () {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart () {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession () {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(isUserAuthenticated)\r\n    ])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}